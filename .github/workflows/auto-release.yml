name: Auto Release

# Trigger after CI workflow completes successfully on master
# This ensures we only release when tests pass
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [master]

permissions:
  contents: write  # Required to create tags and releases

jobs:
  auto-release:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag comparison

      - name: Extract version from __init__.py
        id: get_version
        run: |
          VERSION=$(grep -oP '__version__ = "\K[^"]+' src/zsh_llm_suggestions/__init__.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Current version in __init__.py: $VERSION"

      - name: Get latest release tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          if [ "$LATEST_TAG" = "none" ]; then
            echo "📝 No previous tags found - this will be the first release"
          else
            echo "📝 Latest release tag: $LATEST_TAG"
          fi

      - name: Check if version needs release
        id: check_release
        run: |
          CURRENT_VERSION="v${{ steps.get_version.outputs.version }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"

          if [ "$LATEST_TAG" = "none" ]; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "✅ First release - will create tag $CURRENT_VERSION"
          elif [ "$CURRENT_VERSION" = "$LATEST_TAG" ]; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "ℹ️  Version $CURRENT_VERSION already released, skipping"
          else
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed: $LATEST_TAG → $CURRENT_VERSION"
          fi

      - name: Create and push tag
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.get_version.outputs.tag }}" -m "Release ${{ steps.get_version.outputs.tag }}"
          git push origin "${{ steps.get_version.outputs.tag }}"
          echo "🏷️  Created and pushed tag ${{ steps.get_version.outputs.tag }}"

      - name: Generate release notes
        if: steps.check_release.outputs.needs_release == 'true'
        id: release_notes
        run: |
          # Start with the static template
          cat > release_notes.md << 'EOF'
          ## Installation

          ### Install via uv (Recommended)
          ```bash
          uv tool install git+https://github.com/cearley/zsh-llm-suggestions@${{ steps.get_version.outputs.tag }}
          zsh-llm-install
          ```

          ### Install via git clone
          ```bash
          git clone --branch ${{ steps.get_version.outputs.tag }} https://github.com/cearley/zsh-llm-suggestions.git ~/.local/share/zsh-llm-suggestions
          echo 'source ~/.local/share/zsh-llm-suggestions/zsh-llm-suggestions.zsh' >> ~/.zshrc
          ```

          ## Key Bindings
          - `Ctrl+O` - OpenAI command suggestions
          - `Ctrl+X then O` - OpenAI command explanations
          - `Ctrl+P` - GitHub Copilot suggestions
          - `Ctrl+X then P` - GitHub Copilot explanations

          EOF

          # Add commits section
          echo "" >> release_notes.md
          echo "## Changes in this Release" >> release_notes.md
          echo "" >> release_notes.md

          # Get the range of commits since last tag
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          if [ "$LATEST_TAG" = "none" ]; then
            # First release - get all commits
            echo "Initial release of zsh-llm-suggestions! 🎉" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          else
            # Get commits since last tag
            git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          echo "See [README.md](https://github.com/cearley/zsh-llm-suggestions/blob/master/README.md) for full documentation." >> release_notes.md

          echo "📝 Generated release notes with commit history"

      - name: Create GitHub Release
        if: steps.check_release.outputs.needs_release == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create release with auto-generated notes + custom template
          gh release create "${{ steps.get_version.outputs.tag }}" \
            --title "${{ steps.get_version.outputs.tag }}" \
            --notes-file release_notes.md \
            --generate-notes \
            --latest

          echo "🎉 Created GitHub release: ${{ steps.get_version.outputs.tag }}"

      - name: No release needed
        if: steps.check_release.outputs.needs_release == 'false'
        run: |
          echo "ℹ️  No release needed - version ${{ steps.get_version.outputs.version }} already released"
          echo "To create a new release, bump the version in src/zsh_llm_suggestions/__init__.py"
