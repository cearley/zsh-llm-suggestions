[project]
name = "zsh-llm-suggestions"
dynamic = ["version"]
description = "LLM-based command suggestions for zsh"
authors = [
    {name = "Craig Earley", email = "cearley@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["zsh", "shell", "llm", "openai", "copilot", "suggestions"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
    "Topic :: Utilities",
]

dependencies = [
    "openai>=1.0.0",
    "questionary>=2.0.0",
]

[project.optional-dependencies]
highlight = [
    "pygments>=2.10.0",
]
dev = [
    "pygments>=2.10.0",
]

[project.scripts]
zsh-llm-openai = "zsh_llm_suggestions.openai_backend:main"
zsh-llm-copilot = "zsh_llm_suggestions.copilot_backend:main"
zsh-llm-install = "zsh_llm_suggestions.installer:install"
zsh-llm-uninstall = "zsh_llm_suggestions.installer:uninstall"
zsh-llm-status = "zsh_llm_suggestions.installer:status"

[project.urls]
Homepage = "https://github.com/cearley/zsh-llm-suggestions"
Repository = "https://github.com/cearley/zsh-llm-suggestions"
Issues = "https://github.com/cearley/zsh-llm-suggestions/issues"
"Security Audit" = "https://github.com/cearley/zsh-llm-suggestions/blob/master/SECURITY_AUDIT.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/zsh_llm_suggestions"]

[tool.hatch.build.targets.wheel.shared-data]
"src/zsh_llm_suggestions/data" = "share/zsh-llm-suggestions"

[tool.hatch.version]
path = "src/zsh_llm_suggestions/__init__.py"

[dependency-groups]
dev = [
    "pygments>=2.19.2",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.8.0",
    "mypy>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "integration: marks tests as integration tests (may require API keys)",
    "unit: marks tests as unit tests (no external dependencies)",
]

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, will tighten later
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "openai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pygments.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "questionary.*"
ignore_missing_imports = true
