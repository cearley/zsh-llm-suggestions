[project]
name = "zsh-llm-suggestions"
version = "0.1.0"
description = "LLM-based command suggestions for zsh"
authors = [
    {name = "Craig Earley", email = "cearley@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["zsh", "shell", "llm", "openai", "copilot", "suggestions"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
    "Topic :: Utilities",
]

dependencies = [
    "openai>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pygments>=2.10.0",
]

[project.urls]
Homepage = "https://github.com/cearley/zsh-llm-suggestions"
Repository = "https://github.com/cearley/zsh-llm-suggestions"
Issues = "https://github.com/cearley/zsh-llm-suggestions/issues"
"Security Audit" = "https://github.com/cearley/zsh-llm-suggestions/blob/master/SECURITY_AUDIT.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = []  # No Python packages to ship
include = [
    "*.py",           # Include Python scripts
    "*.zsh",          # Include zsh scripts
    "README.md",      # Include documentation
    "demo/*",         # Include demo files
]

[dependency-groups]
dev = [
    "pygments>=2.19.2",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "integration: marks tests as integration tests (may require API keys)",
    "unit: marks tests as unit tests (no external dependencies)",
]
